<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="API_Automation_Testing_Using_Jmeter_Keyword_Driven_Framework">
      <stringProp name="TestPlan.comments">API_Automation_Testing_Using_Jmeter_Keyword_Driven_Framework</stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Generic">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Environment" elementType="Argument">
            <stringProp name="Argument.name">Environment</stringProp>
            <stringProp name="Argument.value">${__P(Environment)}</stringProp>
            <stringProp name="Argument.desc">jmeter -JEnvironment=Dev    (Pie,Stage)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeDelay" elementType="Argument">
            <stringProp name="Argument.name">timeDelay</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shellFileDirectory" elementType="Argument">
            <stringProp name="Argument.name">shellFileDirectory</stringProp>
            <stringProp name="Argument.value">/home/rishi/jmeter/jmeter/bin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Base_Dir_Path" elementType="Argument">
            <stringProp name="Argument.name">Base_Dir_Path</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">reqres.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="api_version" elementType="Argument">
            <stringProp name="Argument.name">api_version</stringProp>
            <stringProp name="Argument.value">api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">dev: dev.subscriptions.api.hp.com PIE: test.subscriptions.api.hp.com</stringProp>
      </Arguments>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Master Test Fragment" enabled="true"/>
      <hashTree>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller">
          <stringProp name="SwitchController.value">${actionVar}</stringProp>
        </SwitchController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="GET_Calls">
            <stringProp name="TestPlan.comments">MD001</stringProp>
            <stringProp name="IncludeController.includepath">Test_Files\GET_Calls.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Post_Calls">
            <stringProp name="TestPlan.comments">MD002</stringProp>
            <stringProp name="IncludeController.includepath">Test_Files\Post_Calls.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Put_Calls">
            <stringProp name="TestPlan.comments">MD003</stringProp>
            <stringProp name="IncludeController.includepath">Test_Files\Put_Calls.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Master_Execution_Engine">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/arvind.pareek/Documents/GitHub/API_Automation_Testing_Using_Jmeter_Keyword-Driven_Framework/Keyword_CSV_File/Master_Controller.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Executing ${ModuleId} - Keywords: ${__split(${keywords},keyword,;)}">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller">
          <stringProp name="ForeachController.inputVal">keyword</stringProp>
          <stringProp name="ForeachController.returnVal">action</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">100</stringProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - set newAction">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;newAction&quot;,vars.get(&quot;action&quot;));
SampleResult.setIgnore();</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
            <stringProp name="IfController.condition">${__groovy(&quot;${newAction}&quot;.contains(&quot;SignIn&quot;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String keyword = vars.get(&quot;newAction&quot;);
String[] keys = keyword.split(&quot; &quot;);
vars.put(&quot;userType&quot;,keys[2]);
vars.put(&quot;newAction&quot;,keys[0]+&quot; &quot;+keys[1]);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">prev.setIgnore();</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - set acrtionVar">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;actionVar&quot;,vars.get(&quot;newAction&quot;));
SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller_Target to Switch Controller">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-1437215540">API_Automation_Testing_Using_Jmeter_Keyword_Driven_Framework</stringProp>
              <stringProp name="-1143220992">Master Test Fragment</stringProp>
              <stringProp name="-878946296">Switch Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Prod Env" enabled="false">
          <stringProp name="TestPlan.comments">BaseURL	${__P(BaseURL)}	,Apigee_IP	dev.subscriptions.api.hp.com</stringProp>
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;Environment&quot;) == &quot;Prod&quot; )}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Generic for Prod Env">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Environment" elementType="Argument">
                <stringProp name="Argument.name">Environment</stringProp>
                <stringProp name="Argument.value">PROD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name" elementType="Argument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">Anshu</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="job" elementType="Argument">
                <stringProp name="Argument.name">job</stringProp>
                <stringProp name="Argument.value">Devops</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Qa Env">
          <stringProp name="TestPlan.comments">BaseURL	${__P(BaseURL)}	,Apigee_IP	dev.subscriptions.api.hp.com</stringProp>
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;Environment&quot;) == &quot;Pie&quot; )}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Generic for Prod Env">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Environment" elementType="Argument">
                <stringProp name="Argument.name">Environment</stringProp>
                <stringProp name="Argument.value">QA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name" elementType="Argument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">Pareek</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="job" elementType="Argument">
                <stringProp name="Argument.name">job</stringProp>
                <stringProp name="Argument.value">Tester</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Dev Env" enabled="false">
          <stringProp name="TestPlan.comments">&quot;Apigee_IP&quot;==&quot;dev.subscriptions.api.hp.com&quot;</stringProp>
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;Environment&quot;) == &quot;Dev&quot; )}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Generic for Prod Env">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Environment" elementType="Argument">
                <stringProp name="Argument.name">Environment</stringProp>
                <stringProp name="Argument.value">DEV</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="name" elementType="Argument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">Arvind</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="job" elementType="Argument">
                <stringProp name="Argument.name">job</stringProp>
                <stringProp name="Argument.value">Developer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Production Monitoring - Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${CONFIG_PATH}/TestResults/${Report}.csv</stringProp>
        <stringProp name="TestPlan.comments"> **DISABLE: All Argon Testcases</stringProp>
      </ResultCollector>
      <hashTree/>
      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
        <stringProp name="ConstantTimer.delay">500</stringProp>
      </ConstantTimer>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
